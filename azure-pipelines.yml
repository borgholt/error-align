variables:
  # Version of Poetry to be used
  - name: poetryVersion
    value: 2.1.1
  # Version of Python to be used
  - name: pythonVersion
    value: 3.12
  # Virtual environment path outside the source directory
  - name: venvPath
    value: $(Pipeline.Workspace)/.venv

trigger:
  branches:
    include:
      - main

  tags:
    include:
      - '*'

pr:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-22.04

resources:
  repositories:
    - repository: pipeline-tools
      type: github
      name: corticph/pipeline-tools
      endpoint: pipeline-tools
      ref: refs/tags/v2.18.2

stages:
  - stage: Test
    displayName: "Stage | Test"
    dependsOn: []
    condition: not(contains(variables['Build.SourceVersionMessage'], '[skip ci]'))

    jobs:
      - job: setup_and_test
        displayName: 'Run tests'
        strategy:
          matrix:
            Python311:
              pythonVersionMatrix: '3.11'
            Python312:
              pythonVersionMatrix: '3.12'
        steps:
          - template: templates/git/set-git-token-applied.yml@pipeline-tools
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(pythonVersionMatrix)
            displayName: 'Use Python $(pythonVersionMatrix)'
          - script: |
              python -m venv $(venvPath)
              source $(venvPath)/bin/activate
              pip install poetry==$(poetryVersion)
              export POETRY_NO_INTERACTION=1
              export POETRY_VIRTUALENVS_IN_PROJECT=0
              export POETRY_VIRTUALENVS_PATH=$(venvPath)
              poetry install --with test
            displayName: 'Install dependencies'
          - task: PublishPipelineArtifact@1
            condition: eq(variables.pythonVersionMatrix, '3.12')
            inputs:
              targetPath: $(venvPath)
              artifact: venv
            displayName: 'Publish virtual environment as pipeline artifact'
          - script: |
              set -e
              chmod -R +x $(venvPath)/bin
              source $(venvPath)/bin/activate
              make test
            displayName: 'Run tests'
          - task: PublishTestResults@2
            condition: eq(variables.pythonVersionMatrix, '3.12')
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(Build.SourcesDirectory)/test-results.xml'
          - task: PublishCodeCoverageResults@2
            condition: eq(variables.pythonVersionMatrix, ${{ variables.pythonVersion }})
            inputs:
              summaryFileLocation: '$(Build.SourcesDirectory)/coverage.xml'
            displayName: 'Publish code coverage results'

      - job: lint
        dependsOn: [setup_and_test]
        displayName: "Lint code using pre-commit"
        steps:
          - template: templates/git/set-git-token-applied.yml@pipeline-tools
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(pythonVersion)
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: venv
              path: $(venvPath)
            displayName: 'Download virtual environment artifact'
          - script: |
              chmod -R +x $(venvPath)/bin
              source $(venvPath)/bin/activate
              make pre-commit-pipeline
            displayName: "Run pre-commit"
